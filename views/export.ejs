<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Plataforma Educativa IOT</title>
    <link rel="shortcut icon" href="/img/tuercas.png">

    

    <!-- Bootstrap core CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

    <style>
      .bd-placeholder-img {
        font-size: 1.125rem;
        text-anchor: middle;
        -webkit-user-select: none;
        -moz-user-select: none;
        user-select: none;
      }

      @media (min-width: 768px) {
        .bd-placeholder-img-lg {
          font-size: 3.5rem;
        }
      }
    </style>

    
    <!-- Custom styles for this template -->
    <link href="css/dashboard.css" rel="stylesheet">
  </head>
  <body>
    
<header class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow">
  <a class="navbar-brand col-md-3 col-lg-3 me-0 px-3" href="#">
    <img style="padding: 0 8px;" src="/img/logo.png" width="300" height="45" class="d-inline-block align-text-top">
  </a>
  <button class="navbar-toggler position-absolute d-md-none collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#sidebarMenu" aria-controls="sidebarMenu" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>
  <div class="navbar-nav">
    <div class="nav-item text-nowrap">
      <div class="btn-group me-2">
        <a class="px-3 btn btn-secondary" href="/">Volver</a>
        <a class="px-3 disabled"></a>
      </div>
    </div>
  </div>
</header>

<div class="container">
  <div class="row">
    <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 ">
      <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">Reporte</h1>
        <a class="px-3 btn btn-danger" id="bDescargar">Descargar</a>
      </div>
        <div id="page-content" >
              <form id="fecha"class="row gy-2 gx-3 align-items-center">
                <div class="col s4">
                  <label class="form-label">Fecha Desde</label>
                  <div class="input-group">
                    <input type="date" id="fechaDesde" class="form-control" id="autoSizingInputGroup">
                  </div>
                </div>
                <div class="col s4">
                  <label class="form-label">Fecha hasta</label>
                  <div class="input-group">
                    <input type="date" id="fechaHasta" class="form-control" id="autoSizingInputGroup">
                  </div>
                </div>
                <div class="col s2">
                  <label class="form-label">Usuario</label>
                  <div class="input-group">
                    <select class="form-select" name="select" id="selectUser">
                      <option value="" Selected disabled>Seleccionar Usuario</option>
                    </select>
                  </div>
                </div>
                <div class="col s4">
                  <label class="form-label" for="autoSizingInput"></label>
                  <div class="input-group">
                    <button type="button" id="bSubmit"class="btn btn-success" style="margin-top: 20px;">Enviar</button>
                  </div>
                  
                </div>
              </form>
      </div>
      <div id="reportPage">
          <div id="chartContainer" style="width: 30%;float: left;">
            <canvas id="myChart1"></canvas>
          </div>
          <div style="width: 30%; float: left;">
            <canvas id="myChart2"></canvas>
          </div>
          <div style="width: 30%; float: left;">
            <canvas id="myChart3"></canvas>
          </div>
          <br/><br/><br/>
          <div style="width: 70%; height: 500px;">
            <canvas id="myChart"></canvas>
          </div>
      </div>
    </div>
    </main>
  </div>
</div>


    <script src="https://code.jquery.com/jquery-3.6.0.js" integrity="sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.min.js" integrity="sha512-Wt1bJGtlnMtGP0dqNFH1xlkLBNpEodaiQ8ZN5JLA5wpc1sUlk/O5uuOMNgvzddzkpvZ9GLyYNa8w2s7rqiTk5Q==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.3/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.2/jspdf.debug.js"></script>
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="/socket.io/socket.io.js"></script>    
    <script>
        const bSubmit = document.querySelector('#bSubmit');
        const bDescargar = document.querySelector('#bDescargar');
        
        const $select = document.querySelector("#selectUser");
        var ctx = document.getElementById('myChart').getContext('2d');
        var ctx1 = document.getElementById('myChart1').getContext('2d');
        var ctx2 = document.getElementById('myChart2').getContext('2d');
        var ctx3 = document.getElementById('myChart3').getContext('2d');
        var myChart;
        var myChartMax;
        var myChartAvg;
        var myChartMin;
        getUser();
        function getUser(){
          fetch('/getUser')
          .then(response => response.json())
          .then(datos => mostrar(datos))
          .catch(error => console.log(error))

          const mostrar = (datos) => {
            if(datos.status === 200){
                datos.data.forEach(elem => {
                    const option = document.createElement('option');
                    option.value = elem.id;
                    option.text = elem.nombreUsuario;
                    $select.appendChild(option);
                  })
            }
          }
        }
        bSubmit.addEventListener('click', async () => {
          let fechaDesde = document.querySelector('#fechaDesde').value
          let fechaHasta = document.querySelector('#fechaHasta').value
          let userSelect = document.getElementById("selectUser");
          let user = userSelect.value;
          let flag = false
          
          if(fechaDesde === '' || fechaHasta === ''){
            flag = true
            return Swal.fire({
              icon: 'error',
              title: 'Oops...',
              text: 'Por favor, selecionar rango de fecha',
            })
          }
          if(!user){
            return Swal.fire({
              icon: 'error',
              title: 'Oops...',
              text: 'Por favor, selecionar usuario',
            })
          }
          
          const data = {fechaDesde, fechaHasta,user}
          const options = {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(data),
          }
          

          metricAll(options);
          metricMax(options);
          metricAvg(options);
          metricMin(options);
      })
        bDescargar.addEventListener('click',() => {
            // get size of report page
            var reportPageHeight = $('#reportPage').innerHeight();
            var reportPageWidth = $('#reportPage').innerWidth();

            // create a new canvas object that we will populate with all other canvas objects
            var pdfCanvas = $('<canvas />').attr({
              id: "canvaspdf",
              width: reportPageWidth,
              height: reportPageHeight
            });
            
            // keep track canvas position
            var pdfctx = $(pdfCanvas)[0].getContext('2d');
            var pdfctxX = 10;
            var pdfctxY = 200;
            var buffer = 100;
            
            // for each chart.js chart
            $("canvas").each(function(index) {
              // get the chart height/width
              var canvasHeight = $(this).innerHeight();
              var canvasWidth = $(this).innerWidth();
              
              // draw the chart into the new canvas
              pdfctx.drawImage($(this)[0], pdfctxX, pdfctxY, canvasWidth, canvasHeight);
              pdfctxX += canvasWidth + buffer;
              
              // our report page is in a grid pattern so replicate that in the new canvas
              if (index % 2 === 1) {
                pdfctxX = 0;
                pdfctxY += canvasHeight + buffer;
              }
            });
            
            // create new pdf and add our new canvas as an image
            var pdf = new jsPDF('l', 'pt', [reportPageWidth, reportPageHeight]);
            pdf.addImage($(pdfCanvas)[0], 'PNG', 0, 0);
            
            // download the pdf
            pdf.save('filename.pdf');
        })
        const metricAll = (options) =>{
          if(myChart){
            myChart.destroy();
          }
          myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    datasets: [{
                        label: 'Temperatura',
                        data: [],
                        backgroundColor: [
                        'rgba(255, 0, 0, 0.2)'
                        ],
                      borderColor: [
                        'rgba(255, 0,0, 1)'
                        ]
                          }]
                        },
                          options: {}
          });
          
          fetch('/getMetric',options)
                .then(response => response.json())
                .then(datos => mostrar(datos))
                .catch(error => console.log(error))
          const mostrar = (datos) => {
                if(datos.status === 200){
                  datos.data.forEach(elem => {
                    var date = moment(elem.fecha).format('DD-MM-YYYY')
                    myChart.data[`labels`].push(date);
                    myChart.data[`datasets`][0].data.push(elem.valor)
                    myChart.update();
                  })
                }
          }
        }

        const metricMax = (options) => {
            if(myChartMax){
              myChartMax.destroy();
            }
            myChartMax = new Chart(ctx1, {
              type: 'bar',
              data: {
                datasets: [{
                  label: 'Temperatura Maxima',
                  data: [],
                  backgroundColor: [
                    'rgba(255, 165, 0, 0.2)'
                    ],
                  borderColor: [
                    'rgba(255,165,0, 1)'
                    ]
                    }]
                    },
                  options: {}
            });

            fetch('/getMetricMax',options)
                .then(response => response.json())
                .then(datos => mostrar(datos))
                .catch(error => console.log(error))

          const mostrar = (datos) => {
                if(datos.status === 200){
                  datos.data.forEach(elem => {
                    myChartMax.data[`labels`].push('Fecha maxima: ' + elem.maximo +'°');
                    myChartMax.data[`datasets`][0].data.push(elem.maximo)
                    myChartMax.update();
                  })
                }
          }
        
        }
        
        const metricAvg = (options) => {
            if(myChartAvg){
              myChartAvg.destroy();
            }
            myChartAvg = new Chart(ctx2, {
              type: 'bar',
              data: {
                datasets: [{
                  label: 'Temperatura Promedio',
                  data: [],
                  backgroundColor: [
                    'rgba(3, 15, 189,0.2)'
                  ],
                  borderColor: [
                    'rgba(23, 15, 189, 1)'
                  ]
                    }]
                    },
                  options: {}
            });

            fetch('/getMetricAvg',options)
                .then(response => response.json())
                .then(datos => mostrar(datos))
                .catch(error => console.log(error))

          const mostrar = (datos) => {
                if(datos.status === 200){
                  datos.data.forEach(elem => {
                    myChartAvg.data[`labels`].push('Fecha promedio: '+ elem.promedio+'°');
                    myChartAvg.data[`datasets`][0].data.push(elem.promedio)
                    myChartAvg.update();
                  })
                }
          }
        
        }
        
        const metricMin = (options) => {
            if(myChartMin){
              myChartMin.destroy();
            }
            var myChartMin = new Chart(ctx3, {
              type: 'bar',
              data: {
                datasets: [{
                  label: 'Temperatura Minima',
                  data: [],
                  backgroundColor: [
                    'rgba(11, 83, 69, 0.2)'
                  ],
                  borderColor: [
                    'rgba(20, 132, 73, 1)'
                  ]
                    }]
                    },
                  options: {}
            });

            fetch('/getMetricMin',options)
                .then(response => response.json())
                .then(datos => mostrar(datos))
                .catch(error => console.log(error))

            const mostrar = (datos) => {
                  if(datos.status === 200){
                    datos.data.forEach(elem => {
                      myChartMin.data[`labels`].push('Fecha minima: '+ elem.minimo+'°');
                      myChartMin.data[`datasets`][0].data.push(elem.minimo)
                      myChartMin.update();
                    })
                  }
              }
        
        }
        
    </script>
  
  </body>
</html>